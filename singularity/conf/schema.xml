<?xml version="1.0" encoding="UTF-8" ?>

<schema name="singularity" version="1.5">
  <fields>

    <!-- Should be the data store ID for the location, e.g. the Riak or Mongo ID -->
    <field indexed="true" multiValued="false" name="id" required="true" stored="true" type="string"/>

    <field indexed="true" name="name" stored="true" type="text_general"/>

    <!-- Ontology info:  categories, keywords -->
    <!-- Note that the payload fields are localized, ideally from the Singularity meme -->
    <field indexed="true" multiValued="true" name="category_facet_en" stored="true" type="string"/>
    <field indexed="true" multiValued="true" name="category_facet_es" stored="true" type="string"/>
    <field indexed="true" multiValued="true" name="category_facet_fr" stored="true" type="string"/>
    <field indexed="true" multiValued="true" name="category_facet_pt" stored="true" type="string"/>

    <field indexed="true" multiValued="true" name="category_en" stored="false" type="payload_en"/>
    <field indexed="true" multiValued="true" name="category_es" stored="false" type="payload_es"/>
    <field indexed="true" multiValued="true" name="category_fr" stored="false" type="payload_fr"/>
    <field indexed="true" multiValued="true" name="category_pt" stored="false" type="payload_pt"/>

    <field indexed="true" multiValued="true" name="parent_category_en" stored="false" type="payload_en"/>
    <field indexed="true" multiValued="true" name="parent_category_es" stored="false" type="payload_es"/>
    <field indexed="true" multiValued="true" name="parent_category_fr" stored="false" type="payload_fr"/>
    <field indexed="true" multiValued="true" name="parent_category_pt" stored="false" type="payload_pt"/>

    <field indexed="true" multiValued="true" name="keyword_facet_en" stored="true" type="string"/>
    <field indexed="true" multiValued="true" name="keyword_facet_es" stored="true" type="string"/>
    <field indexed="true" multiValued="true" name="keyword_facet_fr" stored="true" type="string"/>
    <field indexed="true" multiValued="true" name="keyword_facet_pt" stored="true" type="string"/>

    <field indexed="true" multiValued="true" name="keyword_en" stored="false" type="payload_en"/>
    <field indexed="true" multiValued="true" name="keyword_es" stored="false" type="payload_es"/>
    <field indexed="true" multiValued="true" name="keyword_fr" stored="false" type="payload_fr"/>
    <field indexed="true" multiValued="true" name="keyword_pt" stored="false" type="payload_pt"/>

    <field indexed="true" multiValued="true" name="action_en" stored="false" type="payload_en"/>
    <field indexed="true" multiValued="true" name="action_es" stored="false" type="payload_es"/>
    <field indexed="true" multiValued="true" name="action_fr" stored="false" type="payload_fr"/>
    <field indexed="true" multiValued="true" name="action_pt" stored="false" type="payload_pt"/>

    <!-- So we can query by city, province, state, etc. -->
    <field indexed="true" multiValued="true" name="neighborhood" stored="false" type="text_general"/>
    <field indexed="true" multiValued="true" name="neighborhood_facet" stored="true" type="string"/>
    <field indexed="true" multiValued="true" name="locality" stored="false" type="text_general"/>
    <field indexed="true" multiValued="true" name="locality_facet" stored="true" type="string"/>
    <field indexed="true" multiValued="true" name="region" stored="false" type="text_general"/>
    <field indexed="true" multiValued="true" name="region_facet" stored="true" type="string"/>
    <field indexed="true" multiValued="true" name="country" stored="false" type="text_general"/>
    <field indexed="true" multiValued="true" name="country_facet" stored="true" type="string"/>
    <field indexed="true" multiValued="true" name="postal" stored="false" type="string"/>
    
    <!-- Our Singularity version -->
    <field indexed="true" name="version" stored="true" type="string"/>

    <!-- Solr's version -->
    <field name="_version_" type="long" indexed="true" stored="true"/> 

    <!-- When this document was last indexed -->
    <field default="NOW" indexed="true" multiValued="false" name="timestamp" stored="true" type="date"/>
    
    <!-- GIS queries (Solr 4) -->
    <field name="geo"  type="location_rpt"  indexed="true" stored="true"  multiValued="true" /> 
    
    <!-- Ignore any unknown fields -->    
    <dynamicField multiValued="true" name="*" type="ignored"/>
  </fields>

  <uniqueKey>id</uniqueKey>

  <!-- We're letting Singularity handle this, because of payloads...
  <copyField source="category_en" dest="category_facet_en"/>
  <copyField source="category_es" dest="category_facet_es"/>
  <copyField source="category_fr" dest="category_facet_fr"/>
  <copyField source="category_pt" dest="category_facet_pt"/>

  <copyField source="keyword_en" dest="keyword_facet_en"/>
  <copyField source="keyword_es" dest="keyword_facet_es"/>
  <copyField source="keyword_fr" dest="keyword_facet_fr"/>
  <copyField source="keyword_pt" dest="keyword_facet_pt"/>
  -->

  <copyField source="neighborhood" dest="neighborhood_facet"/>
  <copyField source="locality" dest="locality_facet"/>
  <copyField source="region" dest="region_facet"/>
  <copyField source="country" dest="country_facet"/>

  <types>
    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in a
       standard package such as org.apache.solr.analysis
    -->
    <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
    <fieldType class="solr.StrField" name="string" sortMissingLast="true"/>
    <!-- boolean type: "true" or "false" -->
    <fieldType class="solr.BoolField" name="boolean" sortMissingLast="true"/>
    <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
         currently supported on types that are sorted internally as strings
         and on numeric types.
       This includes "string","boolean", and, as of 3.5 (and 4.x),
       int, float, long, date, double, including the "Trie" variants.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->
    <!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
    -->
    <fieldType class="solr.TrieIntField" name="int" positionIncrementGap="0" precisionStep="0"/>
    <fieldType class="solr.TrieFloatField" name="float" positionIncrementGap="0" precisionStep="0"/>
    <fieldType class="solr.TrieLongField" name="long" positionIncrementGap="0" precisionStep="0"/>
    <fieldType class="solr.TrieDoubleField" name="double" positionIncrementGap="0" precisionStep="0"/>
    <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
    <fieldType class="solr.TrieIntField" name="tint" positionIncrementGap="0" precisionStep="8"/>
    <fieldType class="solr.TrieFloatField" name="tfloat" positionIncrementGap="0" precisionStep="8"/>
    <fieldType class="solr.TrieLongField" name="tlong" positionIncrementGap="0" precisionStep="8"/>
    <fieldType class="solr.TrieDoubleField" name="tdouble" positionIncrementGap="0" precisionStep="8"/>
    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the DateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
    <fieldType class="solr.TrieDateField" name="date" positionIncrementGap="0" precisionStep="0"/>
    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <fieldType class="solr.TrieDateField" name="tdate" positionIncrementGap="0" precisionStep="6"/>
    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldtype class="solr.BinaryField" name="binary"/>
    <!--
      Note:
      These should only be used for compatibility with existing indexes (created with lucene or older Solr versions).
      Use Trie based fields instead. As of Solr 3.5 and 4.x, Trie based fields support sortMissingFirst/Last
      
      Plain numeric field types that store and index the text
      value verbatim (and hence don't correctly support range queries, since the
      lexicographic ordering isn't equal to the numeric ordering)
    -->
    <fieldType class="solr.IntField" name="pint"/>
    <fieldType class="solr.LongField" name="plong"/>
    <fieldType class="solr.FloatField" name="pfloat"/>
    <fieldType class="solr.DoubleField" name="pdouble"/>
    <fieldType class="solr.DateField" name="pdate" sortMissingLast="true"/>
    <!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting 
         or function purposes.  The ordering is generated based on the field
         name and the version of the index. As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.  
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the field name in the request.
     -->
    <fieldType class="solr.RandomSortField" indexed="true" name="random"/>
    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->
    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element.
         Example:
    <fieldType name="text_greek" class="solr.TextField"><analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/></fieldType>-->
    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType class="solr.TextField" name="text_ws" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>
    <!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
   removes stop words from case-insensitive "stopwords.txt"
   (empty by default), and down cases.  At query time only, it
   also applies synonyms. -->
    <fieldType class="solr.TextField" name="text_general" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="stopwords.txt"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>-->
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- A text field with defaults appropriate for English: it
         tokenizes with StandardTokenizer, removes English stop words
         (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming.  The query time analyzer
         also applies synonyms from synonyms.txt. -->
    <fieldType class="solr.TextField" name="text_en" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>-->
        <!-- Case insensitive stop word removal.
          add enablePositionIncrements=true in both the index and query
          analyzers to leave a 'gap' for more accurate phrase queries.
        -->
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_en.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>-->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_en.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>-->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- A text field with defaults appropriate for English, plus
   aggressive word-splitting and autophrase features enabled.
   This field is just like text_en, except it adds
   WordDelimiterFilter to enable splitting and matching of
   words on case-change, alpha numeric boundaries, and
   non-alphanumeric chars.  This means certain compound word
   cases will work, for example query "wi fi" will match
   document "WiFi" or "wi-fi".
        -->
    <fieldType autoGeneratePhraseQueries="true" class="solr.TextField" name="text_en_splitting" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>-->
        <!-- Case insensitive stop word removal.
          add enablePositionIncrements=true in both the index and query
          analyzers to leave a 'gap' for more accurate phrase queries.
        -->
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_en.txt"/>
        <filter catenateAll="0" catenateNumbers="1" catenateWords="1" class="solr.WordDelimiterFilterFactory" generateNumberParts="1" generateWordParts="1" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_en.txt"/>
        <filter catenateAll="0" catenateNumbers="0" catenateWords="0" class="solr.WordDelimiterFilterFactory" generateNumberParts="1" generateWordParts="1" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
    <fieldType autoGeneratePhraseQueries="true" class="solr.TextField" name="text_en_splitting_tight" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" expand="false" ignoreCase="true" synonyms="synonyms.txt"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
        <filter catenateAll="0" catenateNumbers="1" catenateWords="1" class="solr.WordDelimiterFilterFactory" generateNumberParts="0" generateWordParts="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
        <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
             possible with WordDelimiterFilter in conjuncton with stemming. -->
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- Just like text_general except it reverses the characters of
   each token, to enable more efficient leading wildcard queries. -->
    <fieldType class="solr.TextField" name="text_general_rev" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ReversedWildcardFilterFactory" maxFractionAsterisk="0.33" maxPosAsterisk="3" maxPosQuestion="2" withOriginal="true"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- charFilter + WhitespaceTokenizer  -->
    <!--
    <fieldType name="text_char_norm" class="solr.TextField" positionIncrementGap="100" ><analyzer><charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/><tokenizer class="solr.WhitespaceTokenizerFactory"/></analyzer></fieldType>-->
    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType class="solr.TextField" name="alphaOnlySort" omitNorms="true" sortMissingLast="true">
      <analyzer>
        <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <!-- The LowerCase TokenFilter does what you expect, which can be
             when you want your sorting to be case insensitive
          -->
        <filter class="solr.LowerCaseFilterFactory"/>
        <!-- The TrimFilter removes any leading or trailing whitespace -->
        <filter class="solr.TrimFilterFactory"/>
        <!-- The PatternReplaceFilter gives you the flexibility to use
             Java Regular expression to replace any sequence of characters
             matching a pattern with an arbitrary replacement string, 
             which may include back references to portions of the original
             string matched by the pattern.
             
             See the Java Regular Expression documentation for more
             information on pattern and replacement string syntax.
             
             http://java.sun.com/j2se/1.6.0/docs/api/java/util/regex/package-summary.html
          -->
        <filter class="solr.PatternReplaceFilterFactory" pattern="([^a-z])" replace="all" replacement=""/>
      </analyzer>
    </fieldType>
    <fieldtype class="solr.TextField" indexed="true" name="phonetic" stored="false">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldtype>
    <fieldtype class="solr.TextField" indexed="true" name="payloads" stored="false">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!--
        The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
        a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
        Attributes of the DelimitedPayloadTokenFilterFactory : 
         "delimiter" - a one character delimiter. Default is | (pipe)
   "encoder" - how to encode the following value into a playload
      float ->org.apache.lucene.analysis.payloads.FloatEncoder,
      integer ->o.a.l.a.p.IntegerEncoder
      identity ->o.a.l.a.p.IdentityEncoder
            Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
         -->
        <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
      </analyzer>
    </fieldtype>
    <!-- lowercases the entire field value, keeping it as a single token.  -->
    <fieldType class="solr.TextField" name="lowercase" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- 
      Example of using PathHierarchyTokenizerFactory at index time, so
      queries for paths match documents at that path, or in descendent paths
    -->
    <fieldType class="solr.TextField" name="descendent_path">
      <analyzer type="index">
        <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.KeywordTokenizerFactory"/>
      </analyzer>
    </fieldType>
    <!-- 
      Example of using PathHierarchyTokenizerFactory at query time, so
      queries for paths match documents at that path, or in ancestor paths
    -->
    <fieldType class="solr.TextField" name="ancestor_path">
      <analyzer type="index">
        <tokenizer class="solr.KeywordTokenizerFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/"/>
      </analyzer>
    </fieldType>
    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
    <fieldtype class="solr.StrField" indexed="false" multiValued="true" name="ignored" stored="false"/>
    <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if 
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
    <fieldType class="solr.PointType" dimension="2" name="point" subFieldSuffix="_d"/>
    <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
    <fieldType class="solr.LatLonType" name="location" subFieldSuffix="_coordinate"/>
    <!-- An alternative geospatial field type new to Solr 4.  It supports multiValued and polygon shapes.
      For more information about this and other Spatial fields new to Solr 4, see:
      http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4
    -->
    <fieldType class="solr.SpatialRecursivePrefixTreeFieldType" distErrPct="0.025" geo="true" maxDistErr="0.000009" name="location_rpt" units="degrees"/>
    <!-- Money/currency field type. See http://wiki.apache.org/solr/MoneyFieldType
        Parameters:
          defaultCurrency: Specifies the default currency if none specified. Defaults to "USD"
          precisionStep:   Specifies the precisionStep for the TrieLong field used for the amount
          providerClass:   Lets you plug in other exchange provider backend:
                           solr.FileExchangeRateProvider is the default and takes one parameter:
                             currencyConfig: name of an xml file holding exchange rates
                           solr.OpenExchangeRatesOrgProvider uses rates from openexchangerates.org:
                             ratesFileLocation: URL or path to rates JSON file (default latest.json on the web)
                             refreshInterval: Number of minutes between each rates fetch (default: 1440, min: 60)
   -->
    <fieldType class="solr.CurrencyField" currencyConfig="currency.xml" defaultCurrency="USD" name="currency" precisionStep="8"/>
    <!-- some examples for different languages (generally ordered by ISO code) -->
    <!-- Arabic -->
    <fieldType class="solr.TextField" name="text_ar" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- for any non-arabic -->
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_ar.txt"/>
        <!-- normalizes ﻯ to ﻱ, etc -->
        <filter class="solr.ArabicNormalizationFilterFactory"/>
        <filter class="solr.ArabicStemFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- Bulgarian -->
    <fieldType class="solr.TextField" name="text_bg" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_bg.txt"/>
        <filter class="solr.BulgarianStemFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- Catalan -->
    <fieldType class="solr.TextField" name="text_ca" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- removes l', etc -->
        <filter articles="lang/contractions_ca.txt" class="solr.ElisionFilterFactory" ignoreCase="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_ca.txt"/>
        <filter class="solr.SnowballPorterFilterFactory" language="Catalan"/>
      </analyzer>
    </fieldType>
    <!-- CJK bigram (see text_ja for a Japanese configuration using morphological analysis) -->
    <fieldType class="solr.TextField" name="text_cjk" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- normalize width before bigram, as e.g. half-width dakuten combine  -->
        <filter class="solr.CJKWidthFilterFactory"/>
        <!-- for any non-CJK -->
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.CJKBigramFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- Czech -->
    <fieldType class="solr.TextField" name="text_cz" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_cz.txt"/>
        <filter class="solr.CzechStemFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- Danish -->
    <fieldType class="solr.TextField" name="text_da" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_da.txt"/>
        <filter class="solr.SnowballPorterFilterFactory" language="Danish"/>
      </analyzer>
    </fieldType>
    <!-- German -->
    <fieldType class="solr.TextField" name="text_de" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_de.txt"/>
        <filter class="solr.GermanNormalizationFilterFactory"/>
        <filter class="solr.GermanLightStemFilterFactory"/>
        <!-- less aggressive: <filter class="solr.GermanMinimalStemFilterFactory"/>-->
        <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="German2"/>-->
      </analyzer>
    </fieldType>
    <!-- Greek -->
    <fieldType class="solr.TextField" name="text_el" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- greek specific lowercase for sigma -->
        <filter class="solr.GreekLowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="false" words="lang/stopwords_el.txt"/>
        <filter class="solr.GreekStemFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- Spanish -->
    <fieldType class="solr.TextField" name="text_es" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_es.txt"/>
        <filter class="solr.SpanishLightStemFilterFactory"/>
        <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Spanish"/>-->
      </analyzer>
    </fieldType>
    <!-- Basque -->
    <fieldType class="solr.TextField" name="text_eu" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_eu.txt"/>
        <filter class="solr.SnowballPorterFilterFactory" language="Basque"/>
      </analyzer>
    </fieldType>
    <!-- Persian -->
    <fieldType class="solr.TextField" name="text_fa" positionIncrementGap="100">
      <analyzer>
        <!-- for ZWNJ -->
        <charFilter class="solr.PersianCharFilterFactory"/>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ArabicNormalizationFilterFactory"/>
        <filter class="solr.PersianNormalizationFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_fa.txt"/>
      </analyzer>
    </fieldType>
    <!-- Finnish -->
    <fieldType class="solr.TextField" name="text_fi" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_fi.txt"/>
        <filter class="solr.SnowballPorterFilterFactory" language="Finnish"/>
        <!-- less aggressive: <filter class="solr.FinnishLightStemFilterFactory"/>-->
      </analyzer>
    </fieldType>
    <!-- French -->
    <fieldType class="solr.TextField" name="text_fr" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- removes l', etc -->
        <filter articles="lang/contractions_fr.txt" class="solr.ElisionFilterFactory" ignoreCase="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_fr.txt"/>
        <filter class="solr.FrenchLightStemFilterFactory"/>
        <!-- less aggressive: <filter class="solr.FrenchMinimalStemFilterFactory"/>-->
        <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="French"/>-->
      </analyzer>
    </fieldType>
    <!-- Irish -->
    <fieldType class="solr.TextField" name="text_ga" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- removes d', etc -->
        <filter articles="lang/contractions_ga.txt" class="solr.ElisionFilterFactory" ignoreCase="true"/>
        <!-- removes n-, etc. position increments is intentionally false! -->
        <filter class="solr.StopFilterFactory" enablePositionIncrements="false" ignoreCase="true" words="lang/hyphenations_ga.txt"/>
        <filter class="solr.IrishLowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_ga.txt"/>
        <filter class="solr.SnowballPorterFilterFactory" language="Irish"/>
      </analyzer>
    </fieldType>
    <!-- Galician -->
    <fieldType class="solr.TextField" name="text_gl" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_gl.txt"/>
        <filter class="solr.GalicianStemFilterFactory"/>
        <!-- less aggressive: <filter class="solr.GalicianMinimalStemFilterFactory"/>-->
      </analyzer>
    </fieldType>
    <!-- Hindi -->
    <fieldType class="solr.TextField" name="text_hi" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <!-- normalizes unicode representation -->
        <filter class="solr.IndicNormalizationFilterFactory"/>
        <!-- normalizes variation in spelling -->
        <filter class="solr.HindiNormalizationFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_hi.txt"/>
        <filter class="solr.HindiStemFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- Hungarian -->
    <fieldType class="solr.TextField" name="text_hu" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_hu.txt"/>
        <filter class="solr.SnowballPorterFilterFactory" language="Hungarian"/>
        <!-- less aggressive: <filter class="solr.HungarianLightStemFilterFactory"/>-->
      </analyzer>
    </fieldType>
    <!-- Armenian -->
    <fieldType class="solr.TextField" name="text_hy" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_hy.txt"/>
        <filter class="solr.SnowballPorterFilterFactory" language="Armenian"/>
      </analyzer>
    </fieldType>
    <!-- Indonesian -->
    <fieldType class="solr.TextField" name="text_id" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_id.txt"/>
        <!-- for a less aggressive approach (only inflectional suffixes), set stemDerivational to false -->
        <filter class="solr.IndonesianStemFilterFactory" stemDerivational="true"/>
      </analyzer>
    </fieldType>
    <!-- Italian -->
    <fieldType class="solr.TextField" name="text_it" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- removes l', etc -->
        <filter articles="lang/contractions_it.txt" class="solr.ElisionFilterFactory" ignoreCase="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_it.txt"/>
        <filter class="solr.ItalianLightStemFilterFactory"/>
        <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Italian"/>-->
      </analyzer>
    </fieldType>
    <!-- Japanese using morphological analysis (see text_cjk for a configuration using bigramming)

         NOTE: If you want to optimize search for precision, use default operator AND in your query
         parser config with <solrQueryParser defaultOperator="AND"/>further down in this file.  Use 
         OR if you would like to optimize for recall (default).
    -->
    <fieldType autoGeneratePhraseQueries="false" class="solr.TextField" name="text_ja" positionIncrementGap="100">
      <analyzer>
        <!-- Kuromoji Japanese morphological analyzer/tokenizer (JapaneseTokenizer)

           Kuromoji has a search mode (default) that does segmentation useful for search.  A heuristic
           is used to segment compounds into its parts and the compound itself is kept as synonym.

           Valid values for attribute mode are:
              normal: regular segmentation
              search: segmentation useful for search with synonyms compounds (default)
            extended: same as search mode, but unigrams unknown words (experimental)

           For some applications it might be good to use search mode for indexing and normal mode for
           queries to reduce recall and prevent parts of compounds from being matched and highlighted.
           Use <analyzer type="index">and <analyzer type="query">for this and mode normal in query.

           Kuromoji also has a convenient user dictionary feature that allows overriding the statistical
           model with your own entries for segmentation, part-of-speech tags and readings without a need
           to specify weights.  Notice that user dictionaries have not been subject to extensive testing.

           User dictionary attributes are:
                     userDictionary: user dictionary filename
             userDictionaryEncoding: user dictionary encoding (default is UTF-8)

           See lang/userdict_ja.txt for a sample user dictionary file.

           Punctuation characters are discarded by default.  Use discardPunctuation="false" to keep them.

           See http://wiki.apache.org/solr/JapaneseLanguageSupport for more on Japanese language support.
        -->
        <tokenizer class="solr.JapaneseTokenizerFactory" mode="search"/>
        <!--<tokenizer class="solr.JapaneseTokenizerFactory" mode="search" userDictionary="lang/userdict_ja.txt"/>-->
        <!-- Reduces inflected verbs and adjectives to their base/dictionary forms (辞書形) -->
        <filter class="solr.JapaneseBaseFormFilterFactory"/>
        <!-- Removes tokens with certain part-of-speech tags -->
        <filter class="solr.JapanesePartOfSpeechStopFilterFactory" enablePositionIncrements="true" tags="lang/stoptags_ja.txt"/>
        <!-- Normalizes full-width romaji to half-width and half-width kana to full-width (Unicode NFKC subset) -->
        <filter class="solr.CJKWidthFilterFactory"/>
        <!-- Removes common tokens typically not useful for search, but have a negative effect on ranking -->
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_ja.txt"/>
        <!-- Normalizes common katakana spelling variations by removing any last long sound character (U+30FC) -->
        <filter class="solr.JapaneseKatakanaStemFilterFactory" minimumLength="4"/>
        <!-- Lower-cases romaji characters -->
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- Latvian -->
    <fieldType class="solr.TextField" name="text_lv" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_lv.txt"/>
        <filter class="solr.LatvianStemFilterFactory"/>
      </analyzer>
    </fieldType>
    <!-- Dutch -->
    <fieldType class="solr.TextField" name="text_nl" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_nl.txt"/>
        <filter class="solr.StemmerOverrideFilterFactory" dictionary="lang/stemdict_nl.txt" ignoreCase="false"/>
        <filter class="solr.SnowballPorterFilterFactory" language="Dutch"/>
      </analyzer>
    </fieldType>
    <!-- Norwegian -->
    <fieldType class="solr.TextField" name="text_no" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_no.txt"/>
        <filter class="solr.SnowballPorterFilterFactory" language="Norwegian"/>
        <!-- less aggressive: <filter class="solr.NorwegianLightStemFilterFactory"/>-->
        <!-- singular/plural: <filter class="solr.NorwegianMinimalStemFilterFactory"/>-->
      </analyzer>
    </fieldType>
    <!-- Portuguese -->
    <fieldType class="solr.TextField" name="text_pt" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_pt.txt"/>
        <filter class="solr.PortugueseLightStemFilterFactory"/>
        <!-- less aggressive: <filter class="solr.PortugueseMinimalStemFilterFactory"/>-->
        <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Portuguese"/>-->
        <!-- most aggressive: <filter class="solr.PortugueseStemFilterFactory"/>-->
      </analyzer>
    </fieldType>
    <!-- Romanian -->
    <fieldType class="solr.TextField" name="text_ro" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_ro.txt"/>
        <filter class="solr.SnowballPorterFilterFactory" language="Romanian"/>
      </analyzer>
    </fieldType>
    <!-- Russian -->
    <fieldType class="solr.TextField" name="text_ru" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_ru.txt"/>
        <filter class="solr.SnowballPorterFilterFactory" language="Russian"/>
        <!-- less aggressive: <filter class="solr.RussianLightStemFilterFactory"/>-->
      </analyzer>
    </fieldType>
    <!-- Swedish -->
    <fieldType class="solr.TextField" name="text_sv" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_sv.txt"/>
        <filter class="solr.SnowballPorterFilterFactory" language="Swedish"/>
        <!-- less aggressive: <filter class="solr.SwedishLightStemFilterFactory"/>-->
      </analyzer>
    </fieldType>
    <!-- Thai -->
    <fieldType class="solr.TextField" name="text_th" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ThaiWordFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_th.txt"/>
      </analyzer>
    </fieldType>
    <!-- Turkish -->
    <fieldType class="solr.TextField" name="text_tr" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.TurkishLowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="false" words="lang/stopwords_tr.txt"/>
        <filter class="solr.SnowballPorterFilterFactory" language="Turkish"/>
      </analyzer>
    </fieldType>

    <!-- Language-based payloads -->
    <!-- TODO:  More languages, such as French, German, Italian -->

    <!-- English -->
    <fieldtype class="solr.TextField" name="payload_en" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_en.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
        <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" ignoreCase="true" words="lang/stopwords_en.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldtype>

    <!-- Spanish -->
    <fieldType class="solr.TextField" name="payload_es" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_es.txt"/>
        <filter class="solr.SpanishLightStemFilterFactory"/>
        <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Spanish"/>-->
        <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
      </analyzer>
    </fieldType>

    <!-- French -->
    <fieldType class="solr.TextField" name="payload_fr" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter articles="lang/contractions_fr.txt" class="solr.ElisionFilterFactory" ignoreCase="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_fr.txt"/>
        <filter class="solr.FrenchLightStemFilterFactory"/>
        <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
      </analyzer>
    </fieldType>

    <!-- Portuguese -->
    <fieldType class="solr.TextField" name="payload_pt" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" enablePositionIncrements="true" format="snowball" ignoreCase="true" words="lang/stopwords_pt.txt"/>
        <filter class="solr.PortugueseLightStemFilterFactory"/>
        <!-- less aggressive: <filter class="solr.PortugueseMinimalStemFilterFactory"/>-->
        <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Portuguese"/>-->
        <!-- most aggressive: <filter class="solr.PortugueseStemFilterFactory"/>-->
        <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
      </analyzer>
    </fieldType>

  </types>

  <!-- Similarity is the scoring routine for each document vs. a query.
       A custom Similarity or SimilarityFactory may be specified here, but 
       the default is fine for most applications.  
       For more info: http://wiki.apache.org/solr/SchemaXml#Similarity
    -->
  <!--
     <similarity class="com.example.solr.CustomSimilarityFactory"><str name="paramkey">param value</str></similarity>-->

</schema>